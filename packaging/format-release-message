#! /usr/bin/perl

# This script generates release messages for GitHub releases.  It requires
# that 'hub' Ihttps://github.com/github/hub) be installed.

use strict;
use warnings;

use Date::Format;
use Date::Parse;
use File::Temp;
use Getopt::Long;
use Pod::Usage;

use constant CHANGELOG => 'CHANGELOG.md';

my $new_version;
my $name;
my $debug = 1;
GetOptions(
  'version=s' => \$new_version,
  'name=s' => \$name,
  'debug!' => \$debug,
  'help' => sub { pod2usage(-verbose => 2, -exitval => 0); },
) or pod2usage(-exitval => 1);

if (scalar(@ARGV) == 0) {
  my $old_version = last_changelog_version(CHANGELOG);
  if (! defined($new_version)) { $new_version = 'HEAD'; }
  my $new_commit = find_git_commit($new_version);
  my ($date, $sections) = parse_git_commits($new_commit, $old_version);
  print make_changelog_entry($new_version, $date, $sections);
} elsif (scalar(@ARGV) == 1) {
  if ($ARGV[0] eq 'changelog') {
    defined($new_version) or die "required --version argument missing\n";
    update_changelog($new_version);
  } elsif ($ARGV[0] eq 'release') {
    defined($name) or die "required --name argument missing\n";
    defined($new_version) or die "required --version argument missing\n";
    make_release_message($new_version, $name);
  } else {
    die "unknown command $ARGV[0]\n";
  }
} else {
  die "too many arguments\n";
}

exit(0);

########################################################################

use constant {
  BEFORE_COMMIT_MSG => 0,
  IN_RELEASE_MSG => 1,
  IN_OTHER_MSG => 2,
};
use constant INDENT => 4;

# Parses git commit messages and returns a hashref of sections for the changelog.
sub parse_git_commits {
  my ($toref, $fromref) = @_;

  if (! defined $toref) { $toref = 'HEAD'; }
  if (! defined $fromref) { $fromref = ''; }
  print STDERR "from:$fromref to:$toref\n" if $debug;
  if ($fromref ne '') { $fromref = "$fromref.."; }

  # This is a very simple commit log message parser.  It ignores everything
  # but the first line of each commit message.  Then if that line has the form
  # "feat(scope): description" it adds it to the new features list, and if it
  # has the form "fix(scope): description" it adds it to the fixes list.
  #
  # https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines

  my %section;
  my $date;

  my $indent = ' ' x INDENT;
  my $release_msg = '';
  open(my $commits, '-|', 'git', 'log', '--format=medium', "$fromref$toref") or die "exec git failed: $!";
  my $state = BEFORE_COMMIT_MSG;
  while (<$commits>) {
    not defined $date and m/^Date:\s*(.*)/ and do {
      $date = Date::Format::time2str('%Y-%m-%d', Date::Parse::str2time($1));
    };
    m/^commit/ and do {
      if ($release_msg ne '') {
        unshift(@{$section{release}}, $release_msg);
        $release_msg = '';
      }
      $state = BEFORE_COMMIT_MSG;
      next;
    };
    m/^\S/ and next;
    $state == BEFORE_COMMIT_MSG and m/^$indent\S/ and do {
      if (m/^$indent(feat|fix)(?:\([^\)]*\))?:\s*(.*)/) {
        unshift(@{$section{$1}}, "* $2\n");
        $state = IN_OTHER_MSG;
        next;
      }
      if (m/^$indent(release):/) {
        $state = IN_RELEASE_MSG;
        next;
      }
      $state = IN_OTHER_MSG;
      next;
    };
    $state == IN_RELEASE_MSG and m/^$indent/ and do {
      # Ignore blank lines at beginning of release message.
      if (m/^\s*$/ and $release_msg eq '') { next; }
      $release_msg .= substr($_, INDENT);
      next;
    };
  }
  close($commits) or die "git log failed: $?";

  if (! defined $date) {
    die "no commits found for $toref\n";
  }

  return ($date, \%section);
}

sub make_changelog_entry {
  my ($version, $date, $sections) = @_;

  my $version_header = defined($version) ? "Version $version" : "UNRELEASED";

  my $s = "## $version_header &mdash; $date\n\n";
  if (exists($sections->{release})) {
    $s .= join('', map("$_\n", @{$sections->{release}}));
  }
  if (exists($sections->{feat})) {
    $s .= "### New Features\n\n" . join('', @{$sections->{feat}}) . "\n";
  }
  if (exists($sections->{fix})) {
    $s .= "### Fixes\n\n" . join('', @{$sections->{fix}}) . "\n";
  }

  return $s;
}

sub update_changelog {
  my ($new_version) = @_;

  my $old_version = last_changelog_version(CHANGELOG);
  my $new_commit = find_git_commit($new_version);
  my ($date, $sections) = parse_git_commits($new_commit, $old_version);
  print STDERR "update_changelog: found old version $old_version, date $date for $new_version\n" if $debug;

  my $saved;
  my $ofh = File::Temp->new(TEMPLATE => 'CHANGELOG-XXXXXX', DIR => '.', UNLINK => 0, SUFFIX => '.md');
  open(my $ifh, '<', CHANGELOG) or die "open ".CHANGELOG." for read failed: $!\n";

  # Copy until the first change entry.
  while (<$ifh>) {
    if (m/^##\s*Version\s/) { $saved = $_; last; }
    print $ofh $_;
  }

  # Write the new changelog section
  print $ofh make_changelog_entry($new_version, $date, $sections);

  # Copy the remaining entries.
  if (defined $saved) { print $ofh $saved; $saved = undef; }
  while (<$ifh>) {
    print $ofh $_;
  }

  close($ifh);
  close($ofh) or die "close $ofh failed: $!";

  rename($ofh->filename, CHANGELOG) or die "mv $ofh ".CHANGELOG." failed: $!";
}

use constant {
  BEFORE_CHANGELOG_ENTRY => 0,
  IN_CHANGELOG_ENTRY => 1,
};

sub make_release_message {
  my ($new_version, $name) = @_;

  my $s = "$name $new_version\n";

  # Read the release message from the changelog.
  open(my $ifh, '<', CHANGELOG) or die "open ".CHANGELOG." for read failed: $!\n";
  my $state = BEFORE_CHANGELOG_ENTRY;
  while (<$ifh>) {
    if ($state == BEFORE_CHANGELOG_ENTRY && m/^##\s*Version\s+\Q$new_version\E/) {
      # Skip the version line.
      $state = IN_CHANGELOG_ENTRY;
      next;
    }
    if ($state == IN_CHANGELOG_ENTRY) {
      if (m/^##\s*Version\s/) {
        last;
      }
      $s .= $_;
    }
  }
  close($ifh);

  if ($state == BEFORE_CHANGELOG_ENTRY) {
    die "changelog section not found; did you run \"changelog\" command?\n";
  }

  print "$s\n";
}

# Returns the version of the most recent changelog entry, or an empty string
# if there are no changelog entries.
sub last_changelog_version {
  my ($changelog) = @_;

  open(my $ifh, '<', $changelog) or die "open $changelog for read failed: $!\n";
  while (<$ifh>) {
    # '## Version VERSION ...
    m/^##\s*Version\s+(\S+)/ and do {
      return $1;
    };
  }
  close($ifh) or die;
  return '';
}

sub find_git_commit {
  my ($ref) = @_;

  my $commit;
  # First find if the $ref is an existing tag.
  chomp($commit = `git rev-list -n 1 $ref -- 2>/dev/null`);
  if ($commit ne '') { return $commit; }

  # Then look through the commit messages to see if the version is mentioned.
  open(my $ifh, '-|', 'git', 'log', '--format=%H %s') or die "exec git failed: $!";
  while (<$ifh>) {
    if (m/^(\S+) release:.*\b\Q$ref\E\b/) { return $1; }
  }
  close($ifh) or die "git log failed: $?";
  die "no commit found for \"$ref\"\n";
}

__END__

=head1 NAME

format-release-message - Format a changelog entry or release message.

=head1 SYNOPSIS

format-release-message --version I<VERSION>

format-release-message --version I<VERSION> changelog

format-release-message --version I<VERSION> --name I<PROJECT_NAME> release

=head1 DESCRIPTION

B<format-release-message> is intended to help maintain a changelog and make
GitHub release messages from that changelog.

It was inspired by L<Keep a Changelog|https://keepachangelog.com/> and tools
such as
L<semantic-release|https://semantic-release.gitbook.io/semantic-release/>.
Commit messages are formatted using the L<Angular commit message
format|https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines>
to allow a changelog entry to be generated automatically from them, and the
changelog file is updated with the new entry, which can then be edited if
desired.  When the time comes to make a GitHub release, the changelog entry is
extracted from the changelog file to create the GitHub release message.

=head1 COMMANDS

With no command, outputs the current changelog message to standard output.

=over 4

=item [ B<--version> I<VERSION> ] B<changelog>

Updates the CHANGELOG.md file with the current changelog message.  If the
B<--version> option is not given then HEAD is used and an "UNRELEASED" section
is generated.

=item B<--version> I<VERSION> B<--name> I<PROJECT_NAME> B<release>

Outputs the release message for a GitHub release for the last tagged version.

=back

=head1 COMMIT MESSAGE FORMAT

B<format-release-message> uses three commit message types to generate a
changelog entry: C<feat> for a new feature, C<fix> for a bug fix, and
C<release> for a release.  Other commit message types are ignored.  A commit
message should have the format:

    <type>(<scope>): <subject>
    <BLANK LINE>
    <body>

=head1 EXAMPLES

This section gives the steps for a typical release.

First update the version number for your project and create a commit.  The
subject of the commit message should begin with C<release:>.  If the commit
message has a body, it will be used to create the summary part of the
changelog entry.

    format-release-message --version VERSION commitlog

Next edit the updated F<COMMITLOG.md> file if desired.  Then amend your commit
you made in the previous step to add the changelog entry to it, and tag the
amended commit with the release version.

    edit COMMITLOG.md
    git commit --amend --no-edit
    git tag VERSION

Finally create the GitHub release with the B<hub> command.

    git push && git push --tags
    format-release-message --version VERSION --name PROJECT | \
      hub release create -F - VERSION
